#!/bin/bash
# https://github.com/jnvsor/screencap/graphs/contributors

#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.


usage(){
cat << EOF
usage: $(basename $0) [preset] [options] filename

PRESET:
  Name of a file in the folder:
    $config_folder
  or absolute path to equivalent file. Default is:
    $config_folder/default

OPTIONS:

  -h, --help
    Show this message

  -r, --fps
    Framerate in FPS

  -i, --input
    Input size in WxH or "window" to pick one with xwininfo

  -o, --output
    Output size.-1 is wildcard to maintain aspect ratio eg: \`w=-1:h=720\`
    or \`default\` for no scaling

  --blind
    Disable video recording

  --mute
    Disable audio recording

  -t, --threads
    Number of threads to use

  --
    Stop screencap receiving input and pass all following parameters to command

EOF
}

config_folder="$HOME/.sc-rc"

rounding_filter="scale=w=trunc(in_w/2)*2:h=trunc(in_h/2)*2"

if [ -f "$config_folder/$1" ]; then
  source "$config_folder/$1"
  shift
elif [ "${1:0:1}" = "/" -a -f "$1" ]; then
  source "$1"
  shift
else
  source "$config_folder/default"
fi

# Check for user input
while :
do
  case "$1" in
    --help|-h)
      usage
      exit 0
      ;;

    --fps|-r)
      cap_fps="$2"
      shift 2
      ;;

    --input|-i)
      if [ "$2" == "window" ]; then
        wininfo="$(xwininfo)"
        u_cap_size="$(echo "$wininfo" |
            awk '/Width:/{w=$2} /Height:/{h=$2} END{printf("%dx%d", w, h)}')"
        cap_offset="$(echo "$wininfo" | awk '
            /Absolute upper-left X:/{x=$4}
            /Absolute upper-left Y:/{y=$4}
            END{printf("+%d,%d", x, y)}')"
      else
        u_cap_size="$2"
      fi
      shift 2
      ;;

    --output|-o)
      case "$2" in
        default|scale|noscale|in) # any of these keywords will disable scaling
          unset cap_scale
          ;;

        *)
          u_scale="$2"
          ;;
      esac
      shift 2
      ;;

    --blind)
      blind=true
      shift
      ;;

    --mute)
      mute=true
      shift
      ;;

    --threads|-t)
      threads="$2"
      shift 2
      ;;

    --)
      shift
      break
      ;;

    *)
      break
      ;;
  esac
done


# Disable scaling with runtime size options
if [ -n "$u_cap_size" ]; then
  unset cap_scale
  cap_size=$u_cap_size
fi

# Video filter construction
if [ -n "$cap_scale" ]; then
  cap_scale="[cap]scale=${cap_scale}[cap];"
fi

if [ -n "$u_scale" ]; then
  unset cap_scale
  u_scale="[cap]scale=${u_scale}[cap];"
fi

if [ -n "$video_filter" ]; then
  video_filter="${video_filter%%;};"
fi

# Capture settings
cap_name=( "cap" )
if [ -z "$cap_in" ]; then
  cap_in=( -f x11grab -framerate $cap_fps -s $cap_size -i ${cap_device}${cap_offset} )
  video_filter="${cap_scale}${video_filter}${u_scale}[cap]${rounding_filter}[cap];"
elif [ "$cap_in" == "null" ]; then
  unset cap_name
  unset cap_in
fi

# Runtime blind/mute
if [ -n "$blind" ]; then
  unset cap_map
  unset cap_name
  unset cap_in
  unset cap_out
  unset video_map
  unset video_name
  unset video_in
  unset video_out
  unset video_filter
fi

if [ -n "$mute" ]; then
  unset audio_map
  unset audio_name
  unset audio_in
  unset audio_out
  unset audio_filter
fi

# Fill maps when empty
if [ ! $cap_map ]; then
  cap_map=( "${cap_name[@]}" )
fi
if [ ! $video_map ]; then
  video_map=( "${video_name[@]}" )
fi
if [ ! $audio_map ]; then
  audio_map=( "${audio_name[@]}" )
fi

# Build maps
maps=( )
for i in "${cap_map[@]}" "${video_map[@]}" "${audio_map[@]}"; do
  if [ "$i" == "null" ]; then
    continue
  fi
  maps+=( -map "[$i]" )
done

# Build null filters
name_filter=""
count=0
for i in "${cap_name[@]}" "${video_name[@]}"; do
  name_filter="${name_filter}[$count:0]null[$i];"
  let count++
done
for i in "${audio_name[@]}"; do
  name_filter="${name_filter}[$count:0]anull[$i];"
  let count++
done

# Build final filter graph
filter="${name_filter}${video_filter}${audio_filter}"
filter=( -filter_complex "${filter%;}" )

if [ $debug ]; then
  set -x
fi

# Build final command
$executable \
"${cap_in[@]}" \
"${video_in[@]}" \
"${audio_in[@]}" \
"${filter[@]}" \
"${maps[@]}" \
"${video_out[@]}" \
"${cap_out[@]}" \
"${audio_out[@]}" \
-threads $threads \
-y "$@"
