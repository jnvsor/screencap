#!/bin/bash
# https://github.com/jnvsor/screencap/graphs/contributors

#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.


usage(){
cat << EOF
usage: $(basename $0) [preset] [options] filename

PRESET:
  Name of a file in the folder:
    $config_folder
  or absolute path to equivalent file. Default is:
    $config_folder/default

OPTIONS:

  -h, --help
    Show this message

  -r, --fps
    Framerate in FPS

  -i, --input
    Input size in WxH or "window" to pick one with xwininfo

  -o, --output
    Output size.-1 is wildcard to maintain aspect ratio eg: \`w=-1:h=720\`
    or \`default\` for no scaling

  --blind
    Disable video recording

  --mute
    Disable audio recording

  -t, --threads
    Number of threads to use

  --
    Stop screencap receiving input and pass all following parameters to command

EOF
}

config_folder="$HOME/.sc-rc"

rounding_filter="scale=w=trunc(in_w/2)*2:h=trunc(in_h/2)*2"

if [ -f "$config_folder/$1" ]; then
  source "$config_folder/$1"
  shift
elif [ "${1:0:1}" = "/" -a -f "$1" ]; then
  source "$1"
  shift
else
  source "$config_folder/default"
fi

# Check for user input
while :
do
  case "$1" in
    --help|-h)
      usage
      exit 0
      ;;

    --fps|-r)
      cap_fps="$2"
      shift 2
      ;;

    --input|-i)
      if [ "$2" == "window" ]; then
        wininfo="$(xwininfo)"
        u_cap_size="$(echo "$wininfo" |
            awk '/Width:/{w=$2} /Height:/{h=$2} END{printf("%dx%d", w, h)}')"
        cap_offset="$(echo "$wininfo" | awk '
            /Absolute upper-left X:/{x=$4}
            /Absolute upper-left Y:/{y=$4}
            END{printf("+%d,%d", x, y)}')"
      else
        u_cap_size="$2"
      fi
      shift 2
      ;;

    --output|-o)
      case "$2" in
        default|scale|noscale|in) # any of these keywords will disable scaling
          unset cap_scale
          ;;

        *)
          u_scale="$2"
          ;;
      esac
      shift 2
      ;;

    --blind)
      blind=true
      shift
      ;;

    --mute)
      mute=true
      shift
      ;;

    --threads|-t)
      threads="$2"
      shift 2
      ;;

    --)
      shift
      break
      ;;

    *)
      break
      ;;
  esac
done


# Input post-processing
if [ -n "$u_cap_size" ]; then
  unset cap_scale
  cap_size=$u_cap_size
fi

if [ -n "$cap_scale" ]; then
  cap_scale="[cap]scale=${cap_scale}[cap];"
fi

if [ -n "$u_scale" ]; then
  unset cap_scale
  u_scale="[cap]scale=${u_scale}[cap];"
fi

cap_map=( -map "[cap]" )
cap_in=( -f x11grab -framerate $cap_fps -s $cap_size -i ${cap_device}${cap_offset} )

video_filter=( -filter_complex "[0]null[cap];${cap_scale}${video_filter}${u_scale}[cap]${rounding_filter}[cap]" )

audio_filter=( -filter_complex "${audio_filter}" )

if [ -n "$blind" ]; then
  unset cap_map
  unset cap_in
  unset cap_out
  unset video_map
  unset video_in
  unset video_out
  unset video_filter
  audio_offset=0
fi

if [ -n "$mute" ]; then
  audio_count=0
  unset audio_filter
  unset audio_in
  unset audio_out
fi

maps=( "${cap_map[@]}" )
for i in ${video_map[@]}; do
  maps+=( -map $i )
done
for i in $(seq 0 $(($audio_count - 1))); do
  maps+=( -map $(($i + $audio_offset)) )
done


# Build final command
set -x
$executable \
"${cap_in[@]}" \
"${video_in[@]}" \
"${video_filter[@]}" \
"${audio_in[@]}" \
"${audio_filter[@]}" \
"${maps[@]}" \
"${video_out[@]}" \
"${cap_out[@]}" \
"${audio_out[@]}" \
-threads $threads \
-y "$@"